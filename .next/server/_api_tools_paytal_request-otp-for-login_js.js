"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_api_tools_paytal_request-otp-for-login_js";
exports.ids = ["_api_tools_paytal_request-otp-for-login_js"];
exports.modules = {

/***/ "(api)/./tools/paytal/request-otp-for-login.js":
/*!***********************************************!*\
  !*** ./tools/paytal/request-otp-for-login.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiTool: () => (/* binding */ apiTool)\n/* harmony export */ });\n/**\n * Function to request an OTP for login.\n *\n * @param {Object} args - Arguments for the OTP request.\n * @param {string} args.email - The email address to send the OTP to.\n * @returns {Promise<Object>} - The result of the OTP request.\n */ const executeFunction = async ({ email })=>{\n    const apiUrl = process.env.PAYTAL_API_URL;\n    try {\n        // Construct the URL for the OTP request\n        const url = `${apiUrl}/auth/otp`;\n        // Prepare the request body\n        const body = JSON.stringify({\n            email\n        });\n        // Set up headers for the request\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        };\n        // Perform the fetch request\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers,\n            body\n        });\n        const rawText = await response.text();\n        // Check if response is JSON\n        const contentType = response.headers.get(\"content-type\");\n        let res;\n        if (contentType && contentType.includes(\"application/json\")) {\n            res = JSON.parse(rawText);\n        } else {\n            res = {\n                raw: rawText\n            };\n        }\n        // Check if the response was successful\n        if (!response.ok) {\n            throw new Error(`Status ${response.status}: ${JSON.stringify(res)}`);\n        }\n        return res;\n    } catch (error) {\n        // console.log('Error requesting OTP:', error);\n        return {\n            error: `An error occurred while requesting OTP: ${error instanceof Error ? error.message : JSON.stringify(error)}`\n        };\n    }\n};\n/**\n * Tool configuration for requesting an OTP for login.\n * @type {Object}\n */ const apiTool = {\n    function: executeFunction,\n    definition: {\n        type: \"function\",\n        function: {\n            name: \"request_otp\",\n            description: \"Request an OTP for login.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    email: {\n                        type: \"string\",\n                        description: \"The email address to send the OTP to.\"\n                    }\n                },\n                required: [\n                    \"email\"\n                ]\n            }\n        }\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi90b29scy9wYXl0YWwvcmVxdWVzdC1vdHAtZm9yLWxvZ2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQSxrQkFBa0IsT0FBTyxFQUFFQyxLQUFLLEVBQUU7SUFDdEMsTUFBTUMsU0FBVUMsUUFBUUMsR0FBRyxDQUFDQyxjQUFjO0lBQzFDLElBQUk7UUFDRix3Q0FBd0M7UUFDeEMsTUFBTUMsTUFBTSxDQUFDLEVBQUVKLE9BQU8sU0FBUyxDQUFDO1FBRWhDLDJCQUEyQjtRQUMzQixNQUFNSyxPQUFPQyxLQUFLQyxTQUFTLENBQUM7WUFBRVI7UUFBTTtRQUVwQyxpQ0FBaUM7UUFDakMsTUFBTVMsVUFBVTtZQUNkLGdCQUFnQjtZQUNoQixVQUFVO1FBRVo7UUFFQSw0QkFBNEI7UUFDNUIsTUFBTUMsV0FBVyxNQUFNQyxNQUFNTixLQUFLO1lBQ2hDTyxRQUFRO1lBQ1JIO1lBQ0FIO1FBQ0Y7UUFFRSxNQUFNTyxVQUFVLE1BQU1ILFNBQVNJLElBQUk7UUFDbkMsNEJBQTRCO1FBQzlCLE1BQU1DLGNBQWNMLFNBQVNELE9BQU8sQ0FBQ08sR0FBRyxDQUFDO1FBQ3pDLElBQUlDO1FBQ0osSUFBSUYsZUFBZUEsWUFBWUcsUUFBUSxDQUFDLHFCQUFxQjtZQUMzREQsTUFBTVYsS0FBS1ksS0FBSyxDQUFDTjtRQUNuQixPQUFPO1lBQ0xJLE1BQU07Z0JBQUVHLEtBQUtQO1lBQVE7UUFDdkI7UUFDQSx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDSCxTQUFTVyxFQUFFLEVBQUU7WUFDZixNQUFNLElBQUlDLE1BQ1QsQ0FBQyxPQUFPLEVBQUVaLFNBQVNhLE1BQU0sQ0FBQyxFQUFFLEVBQUVoQixLQUFLQyxTQUFTLENBQUNTLEtBQUssQ0FBQztRQUV2RDtRQUVBLE9BQU9BO0lBQ1QsRUFBRSxPQUFPTyxPQUFPO1FBQ2YsK0NBQStDO1FBQzlDLE9BQU87WUFDTEEsT0FBTyxDQUFDLHdDQUF3QyxFQUFFQSxpQkFBaUJGLFFBQVFFLE1BQU1DLE9BQU8sR0FBR2xCLEtBQUtDLFNBQVMsQ0FBQ2dCLE9BQU8sQ0FBQztRQUNwSDtJQUNGO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRCxNQUFNRSxVQUFVO0lBQ2RDLFVBQVU1QjtJQUNWNkIsWUFBWTtRQUNWQyxNQUFNO1FBQ05GLFVBQVU7WUFDUkcsTUFBTTtZQUNOQyxhQUFhO1lBQ2JDLFlBQVk7Z0JBQ1ZILE1BQU07Z0JBQ05JLFlBQVk7b0JBQ1ZqQyxPQUFPO3dCQUNMNkIsTUFBTTt3QkFDTkUsYUFBYTtvQkFDZjtnQkFDRjtnQkFDQUcsVUFBVTtvQkFBQztpQkFBUTtZQUNyQjtRQUNGO0lBQ0Y7QUFDRjtBQUVtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Bvc3RtYW4tbWNwLWdlbmVyYXRvci1tY3AvLi90b29scy9wYXl0YWwvcmVxdWVzdC1vdHAtZm9yLWxvZ2luLmpzPzE3ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGdW5jdGlvbiB0byByZXF1ZXN0IGFuIE9UUCBmb3IgbG9naW4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBBcmd1bWVudHMgZm9yIHRoZSBPVFAgcmVxdWVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcmdzLmVtYWlsIC0gVGhlIGVtYWlsIGFkZHJlc3MgdG8gc2VuZCB0aGUgT1RQIHRvLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gLSBUaGUgcmVzdWx0IG9mIHRoZSBPVFAgcmVxdWVzdC5cbiAqL1xuY29uc3QgZXhlY3V0ZUZ1bmN0aW9uID0gYXN5bmMgKHsgZW1haWwgfSkgPT4ge1xuICBjb25zdCBhcGlVcmwgPSAgcHJvY2Vzcy5lbnYuUEFZVEFMX0FQSV9VUkw7XG4gIHRyeSB7XG4gICAgLy8gQ29uc3RydWN0IHRoZSBVUkwgZm9yIHRoZSBPVFAgcmVxdWVzdFxuICAgIGNvbnN0IHVybCA9IGAke2FwaVVybH0vYXV0aC9vdHBgO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgcmVxdWVzdCBib2R5XG4gICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgZW1haWwgfSk7XG5cbiAgICAvLyBTZXQgdXAgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3RcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcblxuICAgIH07XG5cbiAgICAvLyBQZXJmb3JtIHRoZSBmZXRjaCByZXF1ZXN0XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHlcbiAgICB9KTtcblxuICAgICAgY29uc3QgcmF3VGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIC8vIENoZWNrIGlmIHJlc3BvbnNlIGlzIEpTT05cbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpO1xuICAgIGxldCByZXM7XG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluY2x1ZGVzKFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgICAgcmVzID0gSlNPTi5wYXJzZShyYXdUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geyByYXc6IHJhd1RleHQgfTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHJlc3BvbnNlIHdhcyBzdWNjZXNzZnVsXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFN0YXR1cyAke3Jlc3BvbnNlLnN0YXR1c306ICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAvLyBjb25zb2xlLmxvZygnRXJyb3IgcmVxdWVzdGluZyBPVFA6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJlcXVlc3RpbmcgT1RQOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyb3IpfWBcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIFRvb2wgY29uZmlndXJhdGlvbiBmb3IgcmVxdWVzdGluZyBhbiBPVFAgZm9yIGxvZ2luLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgYXBpVG9vbCA9IHtcbiAgZnVuY3Rpb246IGV4ZWN1dGVGdW5jdGlvbixcbiAgZGVmaW5pdGlvbjoge1xuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIG5hbWU6ICdyZXF1ZXN0X290cCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ1JlcXVlc3QgYW4gT1RQIGZvciBsb2dpbi4nLFxuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGVtYWlsIGFkZHJlc3MgdG8gc2VuZCB0aGUgT1RQIHRvLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlcXVpcmVkOiBbJ2VtYWlsJ11cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGFwaVRvb2wgfTsiXSwibmFtZXMiOlsiZXhlY3V0ZUZ1bmN0aW9uIiwiZW1haWwiLCJhcGlVcmwiLCJwcm9jZXNzIiwiZW52IiwiUEFZVEFMX0FQSV9VUkwiLCJ1cmwiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwicmF3VGV4dCIsInRleHQiLCJjb250ZW50VHlwZSIsImdldCIsInJlcyIsImluY2x1ZGVzIiwicGFyc2UiLCJyYXciLCJvayIsIkVycm9yIiwic3RhdHVzIiwiZXJyb3IiLCJtZXNzYWdlIiwiYXBpVG9vbCIsImZ1bmN0aW9uIiwiZGVmaW5pdGlvbiIsInR5cGUiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwicHJvcGVydGllcyIsInJlcXVpcmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./tools/paytal/request-otp-for-login.js\n");

/***/ })

};
;